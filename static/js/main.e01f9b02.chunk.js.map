{"version":3,"sources":["Forecast.jsx","App.js","serviceWorker.js","index.js"],"names":["Rain","width","height","className","src","alt","Clear","Clouds","Mist","Fog","Snow","App","props","useState","todo","setTodo","input","setInput","axios","require","id","type","autoFocus","placeholder","onChange","n","target","value","onClick","get","then","response","res","data","main","temp","cast","weather","toUpperCase","substring","length","forecast","Math","round","FormatedData","console","log","catch","error","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0PAEe,G,YAAA,CACXA,KAAM,yBAAKC,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,kGAAkGC,IAAI,UACrHC,MAAO,yBAAKL,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,0FAA0FC,IAAI,UAC9GE,OAAQ,yBAAKN,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,kGAAkGC,IAAI,WACvHG,KAAM,yBAAKP,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,4EAA4EC,IAAI,SAC/FI,IAAK,yBAAKR,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,gFAAgFC,IAAI,QAClGK,KAAM,yBAAKT,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,yGAAyGC,IAAI,WCkDjHM,MA3Df,SAAaC,GAAQ,IAAD,EAEQC,qBAFR,mBAETC,EAFS,KAEHC,EAFG,OAGUF,qBAHV,mBAGTG,EAHS,KAGFC,EAHE,KA4BVC,EAAQC,EAAQ,IAmBtB,OAEI,yBAAKhB,UAAU,OACX,6BACA,2BAAOiB,GAAG,aAAaC,KAAK,OAAOC,WAAW,EAAMC,YAAY,aAAaC,SA3BnE,SAACC,GACfR,EAASQ,EAAEC,OAAOC,UA2Bd,4BAAQN,KAAK,SAASlB,UAAU,kBAAkByB,QAtBzC,WAEbV,EAAMW,IAAN,4DAA+Db,EAA/D,4CACKc,MAAK,SAAUC,IAxBxB,SAAsBN,GAClB,IAAIO,EAAMP,EAAEQ,KAAKC,KAAKC,KAAO,OACzBC,EAAOX,EAAEQ,KAAKI,QAAQ,GAAGH,KAC7BnB,EACI,yBAAKZ,UAAU,QACX,+DAA8Ba,EAAM,GAAGsB,cAAgBtB,EAAMuB,UAAU,EAAGvB,EAAMwB,QAAhF,OAECC,EAASL,GACTM,KAAKC,MAAMX,GACZ,yBAAK/B,MAAO,GAAIC,OAAO,OAAOC,UAAU,OACnCC,IAAI,uEACJC,IAAI,0BAcTuC,CAAab,GACbc,QAAQC,IAAI9B,MAEf+B,OAAM,SAAUC,GACbjC,EAAQ,wDAGR8B,QAAQC,IAAIE,MAnCpBC,SAASC,eAAe,cAAcvB,MAAQ,KA8C1C,gBACCb,IC9COqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASC,eAAe,SDyHpB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMgB,c","file":"static/js/main.e01f9b02.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default {\n    Rain: <img width={50} height='auto' className=\"mr-3\"\n               src=\"https://icons-for-free.com/iconfiles/png/128/forecast+rain+weather+icon-1320183300378577212.png\" alt=\"Clear\"/>,\n    Clear: <img width={50} height='auto' className=\"mr-3\"\n                src=\"https://icons-for-free.com/iconfiles/png/128/sunny+weather+icon-1320196485639229368.png\" alt=\"Clean\"/>,\n    Clouds: <img width={50} height='auto' className=\"mr-3\"\n                 src=\"https://icons-for-free.com/iconfiles/png/128/clouds+cloudy+weather+icon-1320196492645090832.png\" alt=\"Clouds\"/>,\n    Mist: <img width={50} height='auto' className=\"mr-3\"\n               src=\"https://icons-for-free.com/iconfiles/png/128/cloud-131983802257875856.png\" alt=\"Mist\"/>,\n    Fog: <img width={50} height='auto' className=\"mr-3\"\n              src=\"https://icons-for-free.com/iconfiles/png/128/fog+icon-1320185124748582180.png\" alt=\"Fog\"/>,\n    Snow: <img width={50} height='auto' className=\"mr-3\"\n               src=\"https://icons-for-free.com/iconfiles/png/128/forecast+snow+weather+winter+icon-1320183300922103241.png\" alt=\"Snow\"/>,\n\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport forecast from './Forecast'\n\nfunction App(props) {\n\n    const [todo, setTodo] = useState();\n    const [input, setInput] = useState();\n\n    function ClearFields() {\n        document.getElementById(\"textfield1\").value = \"\";\n    }\n\n    function FormatedData(n) {\n        let res = n.data.main.temp - 273.15;\n        let cast = n.data.weather[0].main;\n        setTodo(\n            <div className='Resp'>\n                <div>  {`Current weather in ${input[0].toUpperCase() + input.substring(1, input.length)} :`}\n                </div>\n                {forecast[cast]}\n                {Math.round(res)}\n                <img width={50} height='auto' className=\"mr-3\"\n                     src=\"https://cdn3.iconfinder.com/data/icons/meteocons/512/celsius-512.png\"\n                     alt=\"Generic placeholder\"/>\n            </div>);\n    }\n\n    const todoInput = (n) => {\n        setInput(n.target.value)\n    };\n\n    const axios = require('axios');\n\n    const getTodos = () => {\n\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${input}&APPID=23115c617732be5077c954f6e8f4d9e6`)\n            .then(function (response) {\n                FormatedData(response);\n                console.log(input);\n            })\n            .catch(function (error) {\n                setTodo(<div>\n                    Please enter real City\n                </div>);\n                console.log(error);\n            });\n\n        ClearFields()\n    };\n\n    return (\n\n        <div className=\"App\">\n            <br/>\n            <input id='textfield1' type='text' autoFocus={true} placeholder='Enter city' onChange={todoInput}/>\n            <button type=\"button\" className=\"btn btn-success\" onClick={getTodos}> Get Weather</button>\n            {todo}\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}